%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2476 2052
%%HiResBoundingBox: 0 0 2475.1199 2052
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2475.1199 2052 re
W
q
[0.24 0 0 -0.24 0 2052] cm
q
0 0 10312.5 8550 re
W*
q
[48.930054 0 0 48.929493 2695.0684 341.52783] cm
/DeviceRGB {} CS
[0.0314 0.4118 0.4471] SC
/DeviceRGB {} cs
[0.0314 0.4118 0.4471] sc
8.5 16.1 m
9.7 16.1 10.7 15.8 11.7 15.200001 c
15 17.5 26.200001 25.5 28 26.6 c
29.6 27.6 31 28.5 33.099998 28.6 c
34.099998 28.6 36.299999 28.700001 39.699997 28.700001 c
40.399998 30.1 41.899998 31.1 43.599998 31.1 c
46 31.1 48 29.1 48 26.700001 c
48 24.300001 46 22.300001 43.599998 22.300001 c
41.5 22.300001 39.699997 23.800001 39.299999 25.800001 c
36.200001 25.800001 34.099998 25.800001 33.200001 25.700001 c
31.900002 25.700001 31.1 25.200001 29.6 24.200001 c
28 23.200001 17.400002 15.6 13.8 13.1 c
14.2 12.3 14.5 11.3 14.5 10.3 c
14.5 7 11.8 4.4 8.6 4.4 c
5.400001 4.4 2.7 7.1 2.7 10.3 c
2.7 13.5 5.2 16.1 8.5 16.1 c
h
8.5 7.2 m
10.1 7.2 11.4 8.5 11.4 10.1 c
11.4 11.700001 10.099999 13 8.5 13 c
6.9 13 5.6 11.7 5.6 10.1 c
5.6 8.5 6.9 7.2 8.5 7.2 c
h
f
14.4 43.099998 m
23.200001 43.099998 l
23.800001 44.799999 25.400002 46 27.300001 46 c
29.700001 46 31.700001 44 31.700001 41.599998 c
31.700001 39.199997 29.700001 37.199997 27.300001 37.199997 c
25.400002 37.199997 23.800001 38.399998 23.200001 40.099998 c
14.400001 40.099998 l
13.700001 37.599998 11.400001 35.699997 8.700001 35.699997 c
5.400001 35.699997 2.800001 38.399998 2.800001 41.599998 c
2.800001 44.799999 5.500001 47.5 8.700001 47.5 c
11.5 47.599998 13.8 45.700001 14.4 43.099998 c
h
5.8 41.599998 m
5.8 40 7.1 38.699997 8.700001 38.699997 c
10.300001 38.699997 11.6 39.999996 11.6 41.599998 c
11.6 43.199997 10.3 44.5 8.700001 44.5 c
7.1 44.599998 5.8 43.200001 5.8 41.599998 c
h
f
15.7 58.900002 m
18.4 58.900002 20.799999 57 21.4 54.5 c
23.199999 54.5 l
23.799999 56.200001 25.4 57.400002 27.299999 57.400002 c
29.699999 57.400002 31.699999 55.400002 31.699999 53 c
31.699999 50.599998 29.699999 48.599998 27.299999 48.599998 c
25.4 48.599998 23.799999 49.799999 23.199999 51.5 c
21.4 51.5 l
20.699999 49 18.4 47.099998 15.7 47.099998 c
12.4 47.099998 9.799999 49.799999 9.799999 53 c
9.799999 56.200001 12.4 58.900002 15.7 58.900002 c
h
15.7 50 m
17.299999 50 18.6 51.299999 18.6 52.900002 c
18.6 54.500004 17.300001 55.800003 15.700001 55.800003 c
14.1 55.800003 12.800001 54.500004 12.800001 52.900002 c
12.800001 51.299999 14.1 50 15.7 50 c
h
f
10 81.900002 m
10 71.599998 l
10 66.900002 11.6 65.900002 14.3 65.900002 c
17.6 65.900002 21.299999 65.900002 22.900002 66 c
23.500002 67.699997 25.100002 68.900002 27.100002 68.900002 c
29.500002 68.900002 31.500002 66.900002 31.500002 64.5 c
31.500002 62.099998 29.500002 60.099998 27.100002 60.099998 c
25.200003 60.099998 23.600002 61.299999 23.000002 63 c
21.300001 63 17.600002 62.900002 14.400002 62.900002 c
7 62.900002 7 69.400002 7 71.599998 c
7 81.799995 l
4.4 82.399994 2.4 84.799995 2.4 87.599998 c
2.4 90.900002 5.1 93.5 8.3 93.5 c
11.5 93.5 14.200001 90.800003 14.200001 87.599998 c
14.3 84.900002 12.5 82.599998 10 81.900002 c
h
8.3 90.5 m
6.7 90.5 5.4 89.199997 5.4 87.599998 c
5.4 86 6.7 84.699997 8.3 84.699997 c
9.900001 84.699997 11.200001 86 11.200001 87.599998 c
11.3 89.199997 9.9 90.5 8.3 90.5 c
h
f
91.599998 81.800003 m
91.599998 71.599998 l
91.599998 69.5 91.599998 62.899998 84.299995 62.899998 c
80.999992 62.899998 77.299995 62.899998 75.699997 62.999996 c
75.099998 61.299995 73.5 60.099995 71.599998 60.099995 c
69.199997 60.099995 67.199997 62.099995 67.199997 64.499992 c
67.199997 66.899994 69.199997 68.899994 71.599998 68.899994 c
73.5 68.899994 75.099998 67.699997 75.799995 65.999992 c
77.499992 65.999992 81.199997 65.899994 84.399994 65.899994 c
87.099991 65.899994 88.699997 66.799995 88.699997 71.599991 c
88.699997 81.899994 l
86.199997 82.599991 84.399994 84.899994 84.399994 87.599991 c
84.399994 90.899994 87.099991 93.499992 90.299995 93.499992 c
93.5 93.499992 96.199997 90.799995 96.199997 87.599991 c
96.199997 84.800003 94.199997 82.400002 91.599998 81.800003 c
h
90.300003 90.5 m
88.700005 90.5 87.400002 89.199997 87.400002 87.599998 c
87.400002 86 88.700005 84.699997 90.300003 84.699997 c
91.900002 84.699997 93.200005 86 93.200005 87.599998 c
93.199997 89.199997 91.900002 90.5 90.300003 90.5 c
h
f
72 46 m
73.699997 46 75.199997 45 75.900002 43.599998 c
77.599998 43.599998 80.599998 43.599998 83.200005 43.599998 c
90.000008 43.599998 90.000008 37.599998 90.000008 35.599998 c
90.000008 13.5 l
92.400009 12.9 94.200005 10.7 94.200005 8.1 c
94.200005 5.1 91.700005 2.6 88.700005 2.6 c
85.700005 2.6 83.200005 5.1 83.200005 8.1 c
83.200005 10.6 84.800003 12.700001 87.100006 13.400001 c
87.100006 35.600002 l
87.100006 39.800003 85.800003 40.600002 83.300003 40.600002 c
80.800003 40.600002 78.100006 40.600002 76.400002 40.600002 c
76 38.600002 74.200005 37.100002 72.099998 37.100002 c
69.699997 37.100002 67.699997 39.100002 67.699997 41.500004 c
67.5 44 69.5 46 72 46 c
h
86.099998 8.2 m
86.099998 6.8 87.199997 5.7 88.599998 5.7 c
90 5.7 91.099998 6.8 91.099998 8.2 c
91.099998 9.599999 90 10.7 88.599998 10.7 c
87.300003 10.7 86.099998 9.6 86.099998 8.2 c
h
f
71.699997 57.700001 m
73.599998 57.700001 75.199997 56.5 75.799995 54.799999 c
86.599998 54.799999 l
87.299995 57.299999 89.599998 59.200001 92.299995 59.200001 c
95.599998 59.200001 98.199997 56.5 98.199997 53.299999 c
98.199997 50 95.5 47.399998 92.299995 47.399998 c
89.599998 47.399998 87.199997 49.299999 86.599998 51.799999 c
75.900002 51.799999 l
75.300003 50.099998 73.700005 48.899998 71.800003 48.899998 c
69.400002 48.899998 67.400002 50.899998 67.400002 53.299999 c
67.400002 55.700001 69.300003 57.700001 71.699997 57.700001 c
h
92.400002 50.400002 m
94 50.400002 95.300003 51.700001 95.300003 53.300003 c
95.300003 54.900002 94 56.200005 92.400002 56.200005 c
90.800003 56.200005 89.5 54.900005 89.5 53.300003 c
89.400002 51.700001 90.800003 50.400002 92.400002 50.400002 c
h
f
41.400002 34.200001 m
37.900002 34.200001 35.100002 37 35.100002 40.5 c
35.100002 66.099998 l
35.100002 69.599998 37.900002 72.400002 41.400002 72.400002 c
57.600002 72.400002 l
61.100002 72.400002 63.900002 69.599998 63.900002 66.099998 c
63.900002 40.5 l
63.900002 37 61.100002 34.200001 57.600002 34.200001 c
41.400002 34.200001 l
h
f
35.099998 18.299999 m
37.799999 18.299999 40.099998 16.5 40.799999 13.999999 c
50.799999 13.999999 l
51.899998 13.999999 52.899998 13.999999 53.299999 14.399999 c
53.5 14.599999 53.799999 15.099999 53.799999 16.399998 c
53.799999 18.199997 53.799999 20.599998 53.700001 22.499998 c
52.100002 23.199999 50.900002 24.699999 50.900002 26.599998 c
50.900002 28.999998 52.900002 30.999998 55.300003 30.999998 c
57.700005 30.999998 59.700005 28.999998 59.700005 26.599998 c
59.700005 24.599998 58.400005 22.999998 56.600006 22.399998 c
56.600006 20.499998 56.700005 18.199997 56.700005 16.399998 c
56.700005 14.499998 56.300003 13.099998 55.400005 12.299997 c
54.100006 10.999997 52.400005 11.099998 50.800007 11.099998 c
40.900009 11.099998 l
40.300011 8.499998 37.900009 6.599998 35.10001 6.599998 c
31.800011 6.599998 29.20001 9.299997 29.20001 12.499998 c
29.200001 15.6 31.799999 18.299999 35.099998 18.299999 c
h
35.099998 9.4 m
36.699997 9.4 38 10.7 38 12.299999 c
38 13.9 36.700001 15.199999 35.099998 15.199999 c
33.5 15.199999 32.199997 13.899999 32.199997 12.299999 c
32.200001 10.8 33.5 9.4 35.099998 9.4 c
h
f
43.599998 75.699997 m
41.799999 75.699997 40.199997 76.799995 39.599998 78.299995 c
28.5 78.299995 l
26.4 78.299995 22 78.299995 22 84.199997 c
22 84.899994 22 85.599998 22 86.199997 c
19.4 86.799995 17.5 89.199997 17.5 91.899994 c
17.5 95.199997 20.200001 97.799995 23.4 97.799995 c
26.599998 97.799995 29.299999 95.099998 29.299999 91.899994 c
29.299999 89.199997 27.5 86.899994 25 86.199997 c
25 85.599998 24.9 84.899994 24.9 84.199997 c
24.9 81.5 25.799999 81.299995 28.4 81.299995 c
39.299999 81.299995 l
39.799999 83.199997 41.5 84.499992 43.5 84.499992 c
45.900002 84.499992 47.900002 82.499992 47.900002 80.099991 c
48 77.699997 46 75.699997 43.599998 75.699997 c
h
26.299999 92 m
26.299999 93.599998 25 94.900002 23.4 94.900002 c
21.799999 94.900002 20.5 93.599998 20.5 92 c
20.5 90.400002 21.799999 89.099998 23.4 89.099998 c
25 89.099998 26.299999 90.300003 26.299999 92 c
h
f
72 86.199997 m
72 85.599998 72 84.899994 72 84.199997 c
72 78.299995 67.599998 78.299995 65.5 78.299995 c
59.400002 78.299995 l
58.700001 76.699997 57.200001 75.699997 55.400002 75.699997 c
53 75.699997 51 77.699997 51 80.099998 c
51 82.5 53 84.5 55.400002 84.5 c
57.400002 84.5 59.100002 83.099998 59.600002 81.300003 c
65.5 81.300003 l
68.099998 81.300003 69 81.5 69 84.200005 c
69 84.900002 69 85.600006 68.900002 86.200005 c
66.400002 86.900002 64.599998 89.200005 64.599998 91.900002 c
64.599998 95.200005 67.299995 97.800003 70.5 97.800003 c
73.800003 97.800003 76.400002 95.100006 76.400002 91.900002 c
76.5 89.199997 74.599998 86.800003 72 86.199997 c
h
70.599998 94.900002 m
69 94.900002 67.699997 93.599998 67.699997 92 c
67.699997 90.400002 69 89 70.599998 89 c
72.199997 89 73.5 90.300003 73.5 91.900002 c
73.5 93.5 72.199997 94.900002 70.599998 94.900002 c
h
f
Q
q
[64.957657 0 0 64.956917 463.5542 5456.9956] cm
/DeviceRGB {} CS
[0.0314 0.4118 0.4471] SC
/DeviceRGB {} cs
[0.0314 0.4118 0.4471] sc
2.4 25.16 m
1.68 23.48 2.16004 21.9333 3.84 20.52 c
4.42668 20.040001 5.02 19.673321 5.62 19.42 c
6.219999 19.166679 6.7733 18.986681 7.28 18.879999 c
7.86668 18.773319 8.4267 18.719999 8.96 18.719999 c
8.66668 18.986679 8.440001 19.306679 8.28 19.68 c
8.14668 20 8.06668 20.39332 8.04 20.860001 c
8.01332 21.326681 8.14664 21.866701 8.43996 22.480001 c
8.626639 22.880001 8.72664 23.300001 8.73996 23.740002 c
8.75328 24.180002 8.679959 24.600002 8.519959 25.000002 c
8.35996 25.400002 8.13328 25.760002 7.83996 26.080002 c
7.546639 26.400002 7.18664 26.653322 6.75996 26.840002 c
6.35996 27.026682 5.93996 27.120003 5.49996 27.120003 c
5.05996 27.120003 4.63996 27.046682 4.23996 26.900003 c
3.83996 26.753325 3.47996 26.533323 3.15996 26.240004 c
2.83996 25.946684 2.58664 25.586683 2.39996 25.160004 c
2.4 25.16 l
h
7.6 39.919998 m
10.68 39.919998 l
9.5867 39.546677 8.6934 38.879997 8 37.919998 c
7.3066 36.959999 6.96 35.866699 6.96 34.639999 c
6.96 33.4133 7.30668 32.32 8 31.359999 c
8.693319 30.399998 9.5866 29.733299 10.68 29.359999 c
7.16 29.359999 l
5.8 29.359999 4.66 29.533319 3.74 29.879999 c
2.82 30.226679 2.0933 30.66 1.56 31.179998 c
1.0267 31.699997 0.64668 32.266697 0.42 32.879997 c
0.19332 33.493298 0.08 34.079998 0.08 34.639996 c
0.08 35.226677 0.18 35.826694 0.38 36.439995 c
0.58 37.053295 0.94668 37.619995 1.48 38.139996 c
2.01332 38.659996 2.74 39.086674 3.66 39.419994 c
4.58 39.753315 5.7467 39.919994 7.16 39.919994 c
7.6 39.919994 l
7.6 39.919998 l
h
15.56 19.040001 m
15.200001 18.960001 l
15.200001 28.16 l
15.200001 40 l
22.52 40 l
22.52 28.720001 l
22.52 27.546701 22.333321 26.426701 21.960001 25.360001 c
21.586681 24.293301 21.080002 23.333302 20.440001 22.48 c
19.799999 21.626698 19.060001 20.9 18.220001 20.299999 c
17.380001 19.699999 16.493301 19.279999 15.560001 19.039999 c
15.56 19.040001 l
h
44.919998 37.360001 m
45.853317 37.360001 46.693298 37.266682 47.439999 37.080002 c
46.346699 38.0933 45.073399 38.900002 43.619999 39.5 c
42.166599 40.099998 40.599998 40.400002 38.919998 40.400002 c
37.266697 40.400002 35.713398 40.113323 34.259998 39.540001 c
32.806599 38.966679 31.539999 38.18 30.459999 37.18 c
29.379999 36.18 28.526699 35.006699 27.9 33.66 c
27.2733 32.313301 26.959999 30.879999 26.959999 29.360001 c
26.959999 27.893301 27.226679 26.52 27.759998 25.240002 c
28.293318 23.960003 29.019999 22.833302 29.939999 21.860001 c
30.859999 20.8867 31.946699 20.1 33.199997 19.5 c
34.453293 18.9 35.786598 18.559999 37.199997 18.48 c
36.213318 19.6 35.493298 20.8533 35.039997 22.24 c
34.586697 23.626699 34.359997 25.186699 34.359997 26.92 c
34.359997 28.4667 34.633316 29.880001 35.179996 31.16 c
35.726677 32.439999 36.479996 33.540001 37.439995 34.459999 c
38.399994 35.379997 39.519997 36.0933 40.799995 36.599998 c
42.079994 37.106697 43.453297 37.359997 44.919994 37.359997 c
44.919998 37.360001 l
h
49.32 25.559999 m
49.13332 26.066679 48.859959 26.49328 48.499958 26.84 c
48.139957 27.18672 47.73996 27.45336 47.299957 27.640039 c
46.859955 27.826719 46.399956 27.92004 45.919956 27.92004 c
45.439957 27.92004 44.959957 27.826719 44.479958 27.640039 c
43.999958 27.45336 43.579956 27.18004 43.219959 26.82004 c
42.859962 26.460039 42.593281 26.06004 42.41996 25.620039 c
42.246639 25.180038 42.15332 24.71336 42.139999 24.220039 c
42.126678 23.726719 42.21336 23.24004 42.40004 22.76004 c
42.693359 22.066721 42.820038 21.460041 42.780041 20.940041 c
42.740044 20.42004 42.640041 19.97336 42.480042 19.60004 c
42.293362 19.200041 42.02668 18.853361 41.68 18.56004 c
42.400002 18.613359 43.106701 18.70668 43.799999 18.84 c
44.413319 18.97332 45.053299 19.16 45.720001 19.4 c
46.386703 19.639999 47.013401 19.97332 47.600002 20.4 c
47.973324 20.693319 48.313324 21.033319 48.620003 21.42 c
48.926682 21.806681 49.166683 22.23336 49.340004 22.700001 c
49.513325 23.166641 49.606644 23.640001 49.619965 24.120001 c
49.633286 24.6 49.533283 25.080002 49.319965 25.560001 c
49.32 25.559999 l
h
67.440002 19.16 m
68.373322 19.4 69.260002 19.82 70.100006 20.42 c
70.94001 21.02 71.680008 21.7467 72.320007 22.6 c
72.960007 23.4533 73.466705 24.4133 73.840004 25.48 c
74.213303 26.5467 74.400002 27.6667 74.400002 28.84 c
74.400002 40 l
67.080002 40 l
67.080002 28.279999 l
67.080002 19.079998 l
67.133324 19.106678 67.193321 19.119999 67.260002 19.119999 c
67.326683 19.119999 67.386681 19.13332 67.440002 19.16 c
h
51.200001 13.92 m
52.426701 13.38668 53.5732 12.8333 54.6399 12.26 c
55.7066 11.686701 56.626602 11.16 57.399899 10.68 c
58.30658 10.14668 59.133297 9.613401 59.879898 9.08 c
59.879898 40 l
52.879898 40 l
52.879898 18.84 l
52.879898 17.8267 52.793217 17 52.6199 16.360001 c
52.446583 15.720001 52.253262 15.213301 52.03994 14.84 c
51.773258 14.413321 51.493259 14.10664 51.19994 13.91996 c
51.200001 13.92 l
h
97.879997 19.32 m
98.626678 19.933319 99.039894 20.699999 99.119896 21.619999 c
99.199898 22.539999 98.946579 23.359999 98.359894 24.079998 c
97.746574 24.826677 96.973297 25.239998 96.039894 25.319998 c
95.106491 25.399998 94.266594 25.133318 93.519897 24.519999 c
92.98658 24.066679 92.479897 23.786678 91.999901 23.679998 c
91.519905 23.573318 91.093224 23.546638 90.719902 23.599958 c
90.266579 23.653278 89.866585 23.786598 89.519905 23.999918 c
89.706589 23.439919 89.946587 22.893219 90.239906 22.359919 c
90.506584 21.906599 90.853264 21.413279 91.279907 20.879919 c
91.706551 20.34656 92.253265 19.853319 92.919907 19.39992 c
94.81321 18.14662 96.466507 18.119919 97.879906 19.31992 c
97.879997 19.32 l
h
80.279922 21.799999 m
81.106606 21.586679 81.939926 21.2866 82.779922 20.89992 c
83.619919 20.513239 84.373222 20.113239 85.039925 19.699919 c
85.706627 19.286598 86.246628 18.913279 86.659927 18.579918 c
87.073227 18.246557 87.27993 18.013277 87.27993 17.879957 c
87.27993 39.879959 l
80.27993 39.879959 l
80.27993 21.799959 l
80.279922 21.799999 l
h
101 25.16 m
100.279999 23.48 100.76004 21.9333 102.440002 20.52 c
103.02668 20.040001 103.620003 19.673321 104.220001 19.42 c
104.82 19.166679 105.373299 18.986681 105.880005 18.879999 c
106.466682 18.773319 107.026703 18.719999 107.560005 18.719999 c
107.266685 18.986679 107.040009 19.306679 106.880005 19.68 c
106.746681 20 106.666687 20.39332 106.640007 20.860001 c
106.613327 21.326681 106.746651 21.866701 107.03997 22.480001 c
107.226654 22.880001 107.326653 23.300001 107.339973 23.740002 c
107.353294 24.180002 107.279976 24.600002 107.119972 25.000002 c
106.959969 25.400002 106.733292 25.760002 106.439972 26.080002 c
106.146652 26.400002 105.786652 26.653322 105.35997 26.840002 c
104.959969 27.026682 104.53997 27.120003 104.099968 27.120003 c
103.659966 27.120003 103.239967 27.046682 102.839966 26.900003 c
102.439964 26.753325 102.079964 26.533323 101.759964 26.240004 c
101.439964 25.946684 101.186646 25.586683 100.999962 25.160004 c
101 25.16 l
h
106.199997 39.919998 m
109.279999 39.919998 l
108.186699 39.546677 107.293396 38.879997 106.599998 37.919998 c
105.906601 36.959999 105.559998 35.866699 105.559998 34.639999 c
105.559998 33.4133 105.906677 32.32 106.599998 31.359999 c
107.29332 30.399998 108.1866 29.733299 109.279999 29.359999 c
105.760002 29.359999 l
104.400002 29.359999 103.260002 29.533319 102.340004 29.879999 c
101.420006 30.226679 100.693306 30.66 100.160004 31.179998 c
99.626701 31.699997 99.246681 32.266697 99.020004 32.879997 c
98.793327 33.493298 98.680008 34.079998 98.680008 34.639996 c
98.680008 35.226677 98.780006 35.826694 98.980011 36.439995 c
99.180016 37.053295 99.546692 37.619995 100.080009 38.139996 c
100.613327 38.659996 101.340012 39.086674 102.26001 39.419994 c
103.180008 39.753315 104.34671 39.919994 105.76001 39.919994 c
106.200012 39.919994 l
106.199997 39.919998 l
h
114.160004 19.040001 m
113.800003 18.960001 l
113.800003 28.16 l
113.800003 40 l
121.120003 40 l
121.120003 28.720001 l
121.120003 27.546701 120.933319 26.426701 120.560005 25.360001 c
120.186691 24.293301 119.680008 23.333302 119.040009 22.48 c
118.400009 21.626698 117.660011 20.9 116.820007 20.299999 c
115.980003 19.699999 115.093307 19.279999 114.160004 19.039999 c
114.160004 19.040001 l
h
144 18.799999 m
143.600006 19.653318 142.966599 20.226599 142.100006 20.519899 c
141.233414 20.8132 140.386612 20.77322 139.560013 20.399899 c
138.706696 19.999899 138.126709 19.366598 137.820007 18.499899 c
137.513306 17.6332 137.560013 16.773199 137.960007 15.919899 c
138.253326 15.306579 138.393326 14.759899 138.380005 14.279899 c
138.366684 13.799898 138.293365 13.399899 138.160049 13.079899 c
138.026733 12.706579 137.813416 12.373259 137.520096 12.079939 c
138.080093 12.079939 138.653397 12.146619 139.240097 12.279939 c
139.74678 12.413259 140.300095 12.613258 140.900101 12.879939 c
141.500107 13.14662 142.093399 13.533299 142.680099 14.039939 c
144.386795 15.533239 144.826797 17.119938 144.000107 18.799938 c
144 18.799999 l
h
126.399963 20.4 m
126.399963 19.6 126.493286 18.873299 126.679962 18.219999 c
126.866638 17.5667 127.119965 16.98 127.439964 16.459999 c
127.759964 15.939999 128.119965 15.473319 128.519958 15.06 c
128.919952 14.64668 129.333282 14.28 129.759964 13.959999 c
130.746643 13.239999 131.866669 12.679999 133.119965 12.279999 c
133.119965 40.159996 l
126.399963 40.159996 l
126.399963 20.399996 l
126.399963 20.4 l
h
135.559998 28.24 m
136.173325 27.94668 136.826691 27.559999 137.520004 27.08 c
138.080002 26.68 138.706711 26.166679 139.400009 25.540001 c
140.093307 24.913322 140.746613 24.133301 141.360016 23.200001 c
141.360016 28.240002 l
141.360016 33.280003 l
140.693329 32.346684 140.02002 31.560003 139.340012 30.920002 c
138.660004 30.280001 138.040009 29.760002 137.480011 29.360003 c
136.813324 28.880003 136.173309 28.506683 135.560013 28.240002 c
135.559998 28.24 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
