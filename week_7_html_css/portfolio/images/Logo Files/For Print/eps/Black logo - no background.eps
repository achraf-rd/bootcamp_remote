%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2405 654
%%HiResBoundingBox: 0 0 2404.0798 654
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2404.0798 654 re
W
q
[0.24 0 0 -0.24 0 654] cm
q
0 0 10016.666 2724.4331 re
W*
q
[82.582947 0 0 82.614204 202.28024 307.50845] cm
8.520001 6 m
12.42 20 l
9.22 20 l
8.66 17.98 l
5.2 17.98 l
4.64 20 l
1.44 20 l
5.34 6 l
8.520001 6 l
h
6.1 14.72 m
7.76 14.72 l
6.92 11.74 l
6.1 14.72 l
h
21.4 15.2 m
24.6 15.2 l
24.6 17.5 l
24.6 18.879999 23.48 20 22.1 20 c
17.200001 20 l
15.820001 20 14.700001 18.879999 14.700001 17.5 c
14.700001 8.5 l
14.700001 7.12 15.820001 6 17.200001 6 c
22.1 6 l
23.48 6 24.6 7.12 24.6 8.5 c
24.6 10.8 l
21.4 10.8 l
21.4 9.22 l
17.9 9.22 l
17.9 16.799999 l
21.4 16.799999 l
21.4 15.199999 l
21.4 15.2 l
h
34.18 11.4 m
34.18 6 l
37.380001 6 l
37.380001 20 l
34.18 20 l
34.18 14.6 l
30.68 14.6 l
30.68 20 l
27.48 20 l
27.48 6 l
30.68 6 l
30.68 11.4 l
34.18 11.4 l
h
f
Q
q
[29.650652 0 0 29.661873 3597.8894 -120.862442] cm
65.188004 60.807999 m
65.188004 45.979 l
65.188004 43.570999 63.236004 41.618999 60.828003 41.618999 c
45.999001 41.618999 l
43.591 41.618999 41.638 43.570999 41.638 45.979 c
41.638 60.807999 l
41.638 63.216 43.591 65.167999 45.999001 65.167999 c
60.827 65.167999 l
63.235001 65.167999 65.188004 63.216 65.188004 60.807999 c
h
f
20.191 39.366001 m
31.781 39.366001 l
32.066002 41.377003 33.777 42.928001 35.866001 42.928001 c
38.153999 42.928001 40.009003 41.074001 40.009003 38.785 c
40.009003 36.495998 38.155003 34.641998 35.866001 34.641998 c
33.777 34.641998 32.066002 36.192997 31.781002 38.203999 c
20.191002 38.203999 l
19.901001 35.875 17.931002 34.059998 15.525002 34.059998 c
12.921001 34.059998 10.801002 36.178997 10.801002 38.784996 c
10.801002 41.388996 12.920002 43.509995 15.525002 43.509995 c
17.931999 43.509998 19.901001 41.695 20.191 39.366001 c
h
11.964 38.785 m
11.964 36.820999 13.562 35.223 15.526 35.223 c
17.49 35.223 19.087999 36.820999 19.087999 38.785 c
19.087999 40.749001 17.49 42.347 15.525999 42.347 c
13.561998 42.347 11.964 40.749001 11.964 38.785 c
h
f
20.25 63.191002 m
20.25 54.442001 l
31.628 54.442001 l
32.144001 56.144001 33.705002 57.389999 35.575001 57.389999 c
37.862999 57.389999 39.718002 55.535999 39.718002 53.246998 c
39.718002 50.957996 37.864002 49.102997 35.575001 49.102997 c
33.285999 49.102997 31.432001 50.957996 31.432001 53.246998 c
31.432001 53.258999 31.435001 53.267998 31.435001 53.278999 c
19.087 53.278999 l
19.087 53.536999 l
19.087 54.440998 l
19.087 63.188999 l
16.758999 63.479 14.944 65.447998 14.944 67.853996 c
14.944 70.459 17.063 72.578995 19.667999 72.578995 c
22.272999 72.578995 24.393 70.459991 24.393 67.853996 c
24.393 65.449997 22.577999 63.480999 20.25 63.191002 c
h
19.667999 71.417 m
17.705 71.417 16.105999 69.819 16.105999 67.855003 c
16.105999 65.891006 17.704998 64.293007 19.667999 64.293007 c
21.632 64.293007 23.23 65.891006 23.23 67.855003 c
23.23 69.819 21.632 71.417 19.667999 71.417 c
h
f
36.155998 75.703003 m
36.155998 71.939003 l
38.167 71.653999 39.717999 69.944 39.717999 67.855003 c
39.717999 65.567001 37.863998 63.712002 35.574997 63.712002 c
33.285995 63.712002 31.431997 65.566002 31.431997 67.855003 c
31.431997 69.944 32.982998 71.654007 34.993996 71.939003 c
34.993996 75.703003 l
32.665997 75.994003 30.849995 77.963005 30.849995 80.369003 c
30.849995 82.973007 32.969994 85.093002 35.574993 85.093002 c
38.179993 85.093002 40.299992 82.973999 40.299992 80.369003 c
40.299999 77.962997 38.484001 75.994003 36.155998 75.703003 c
h
35.575001 83.931 m
33.611 83.931 32.013 82.333 32.013 80.369003 c
32.013 78.469002 33.514 76.924004 35.390999 76.826004 c
35.757999 76.826004 l
37.634998 76.924004 39.135998 78.469002 39.135998 80.369003 c
39.137001 82.333 37.539001 83.931 35.575001 83.931 c
h
f
53.994999 33.576 m
56.401001 33.576 58.369999 31.762001 58.660999 29.433001 c
70.685997 29.433001 l
70.685997 34.701 l
68.674995 34.986 67.124001 36.695999 67.124001 38.785 c
67.124001 41.072998 68.977997 42.928001 71.266998 42.928001 c
73.556 42.928001 75.410995 41.074001 75.410995 38.785 c
75.410995 36.695999 73.858994 34.986 71.848999 34.701 c
71.848999 29.433001 l
74.625 29.433001 l
74.625 28.27 l
74.610001 28.27 l
74.610001 24.296001 l
76.939003 24.005001 78.753998 22.037001 78.753998 19.630001 c
78.753998 17.026001 76.634995 14.906001 74.028999 14.906001 c
71.425003 14.906001 69.305 17.025002 69.305 19.630001 c
69.305 22.036001 71.119003 24.005001 73.447998 24.296001 c
73.447998 28.27 l
58.660999 28.27 l
58.370998 25.942001 56.401001 24.127001 53.994999 24.127001 c
51.390999 24.127001 49.27 26.246 49.27 28.851002 c
49.271 31.457001 51.390999 33.576 53.994999 33.576 c
h
70.468002 19.631001 m
70.468002 17.667 72.066002 16.069 74.029999 16.069 c
75.993996 16.069 77.591995 17.667 77.591995 19.631001 c
77.591995 21.595001 75.993996 23.193001 74.029999 23.193001 c
72.066002 23.193001 70.468002 21.594999 70.468002 19.631001 c
h
53.994999 25.290001 m
55.959 25.290001 57.556999 26.889 57.556999 28.852001 c
57.556999 30.816002 55.959 32.414001 53.994999 32.414001 c
52.030998 32.414001 50.432999 30.816002 50.432999 28.852001 c
50.433998 26.889 52.030998 25.290001 53.994999 25.290001 c
h
f
71.267998 63.713001 m
68.979996 63.713001 67.125 65.567001 67.125 67.856003 c
67.125 69.945 68.676003 71.655006 70.685997 71.940002 c
70.685997 78.425003 l
60.236 78.425003 l
59.945 76.096001 57.976002 74.282005 55.570999 74.282005 c
52.966 74.282005 50.846001 76.401009 50.846001 79.007004 c
50.846001 81.611008 52.965 83.731003 55.570999 83.731003 c
57.975998 83.731003 59.945999 81.917 60.236 79.588005 c
71.800003 79.588005 l
71.800003 79.007004 l
71.849007 79.007004 l
71.849007 71.940002 l
73.860008 71.654999 75.411003 69.945 75.411003 67.856003 c
75.410004 65.567001 73.556 63.713001 71.267998 63.713001 c
h
55.570999 82.568001 m
53.606998 82.568001 52.008999 80.969002 52.008999 79.006004 c
52.008999 77.042007 53.606998 75.444008 55.570999 75.444008 c
57.534 75.444008 59.132 77.042007 59.132 79.006004 c
59.132 80.970001 57.534 82.568001 55.570999 82.568001 c
h
f
84.420998 49.137001 m
82.015999 49.137001 80.045998 50.951 79.755997 53.281002 c
75.351997 53.281002 l
75.066994 51.27 73.356995 49.719002 71.267998 49.719002 c
68.979996 49.719002 67.125 51.573002 67.125 53.862003 c
67.125 56.151005 68.979004 58.005005 71.267998 58.005005 c
73.356995 58.005005 75.067001 56.454006 75.351997 54.443005 c
79.755997 54.443005 l
80.045998 56.771004 82.015999 58.586006 84.420998 58.586006 c
87.026001 58.586006 89.145996 56.467007 89.145996 53.862007 c
89.146004 51.256001 87.026001 49.137001 84.420998 49.137001 c
h
84.420998 57.423 m
82.458 57.423 80.859001 55.825001 80.859001 53.861 c
80.859001 51.896999 82.458 50.299 84.420998 50.299 c
86.384995 50.299 87.982994 51.896999 87.982994 53.861 c
87.982994 55.825001 86.385002 57.423 84.420998 57.423 c
h
f
Q
q
[82.582947 0 0 82.614204 6753.8613 307.50842] cm
8.84 6 m
10.22 6 11.34 7.12 11.34 8.5 c
11.34 13.76 l
11.34 14.82 10.68 15.72 9.76 16.08 c
11.34 20 l
7.94 20 l
6.42 16.26 l
4.64 16.26 l
4.64 20 l
1.44 20 l
1.44 6 l
8.84 6 l
h
7.48 13.04 m
7.84 13.04 8.14 12.76 8.14 12.4 c
8.14 9.86 l
8.14 9.5 7.84 9.219999 7.480001 9.219999 c
4.64 9.219999 l
4.64 13.039999 l
7.480001 13.039999 l
7.48 13.04 l
h
20.440001 6 m
24.34 20 l
21.139999 20 l
20.58 17.98 l
17.119999 17.98 l
16.56 20 l
13.36 20 l
17.26 6 l
20.440001 6 l
h
18.02 14.72 m
19.68 14.72 l
18.84 11.74 l
18.02 14.72 l
h
35.619999 9.22 m
30.019999 9.22 l
30.019999 11.400001 l
34.039997 11.400001 l
34.039997 14.6 l
30.019997 14.6 l
30.019997 20 l
26.819996 20 l
26.819996 6 l
35.619995 6 l
35.619995 9.22 l
35.619999 9.22 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
